"ZnJvbSBnYW1lLm15dGhpY2FsIGltcG9ydCBzdW1tb25fbXl0aGljYWxfY3JlYXR1cmUKZnJvbSBnYW1lLnBsYXllciBpbXBvcnQgYWRkX2l0ZW1fdG9faW52ZW50b3J5LCBoZWFsX3BsYXllcgpmcm9tIGdhbWUuc3RhdGUgaW1wb3J0IHVwZGF0ZV93b3JsZF9zdGF0ZQpmcm9tIHV0aWxzLnJhbmRvbV9ldmVudHMgaW1wb3J0IGdlbmVyYXRlX3JhbmRvbV9ldmVudAoKCmRlZiB2aXNpdF92aWxsYWdlKHdvcmxkLCBwbGF5ZXIpOgogICAgcHJpbnQoIvCfj5jvuI8gWW91IGVudGVyIHRoZSBidXN0bGluZyB2aWxsYWdlLiDwn5GlIFZpbGxhZ2VycyBnbyBhYm91dCB0aGVpciBkYWlseSBsaXZlcyBhcm91bmQgeW91LiIpCgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBwcmludCgiXG7wn4+Y77iPIFdoYXQgd291bGQgeW91IGxpa2UgdG8gZG8gaW4gdGhlIHZpbGxhZ2U/IikKICAgICAgICBwcmludCgiMS4g8J+PqiBWaXNpdCB0aGUgc2hvcCIpCiAgICAgICAgcHJpbnQoIjIuIPCfkqwgVGFsayB0byB2aWxsYWdlcnMiKQogICAgICAgIHByaW50KCIzLiDwn4+oIFZpc2l0IHRoZSBpbm4iKQogICAgICAgIHByaW50KCI0LiDwn5OcIENoZWNrIGZvciBxdWVzdHMiKQogICAgICAgIHByaW50KCI1LiDwn5qqIExlYXZlIHRoZSB2aWxsYWdlIikKICAgICAgICAjIHByaW50KCI2LiBDaGVjayBvbiB0aGUgdmlsbGFnZSBkcmFnb24iKQoKICAgICAgICBjaG9pY2UgPSBpbnB1dCgiRW50ZXIgeW91ciBjaG9pY2UgKDEtNSk6ICIpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIHZpc2l0X3Nob3Aod29ybGQsIHBsYXllcikKICAgICAgICBlbGlmIGNob2ljZSA9PSAiMiI6CiAgICAgICAgICAgIHRhbGtfdG9fdmlsbGFnZXJzKHdvcmxkLCBwbGF5ZXIpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICB2aXNpdF9pbm4od29ybGQsIHBsYXllcikKICAgICAgICBlbGlmIGNob2ljZSA9PSAiNCI6CiAgICAgICAgICAgIHBlcmZvcm1fcXVlc3Qod29ybGQsIHBsYXllcikKICAgICAgICBlbGlmIGNob2ljZSA9PSAiNSI6CiAgICAgICAgICAgIHByaW50KCJZb3UgZGVjaWRlIHRvIGxlYXZlIHRoZSB2aWxsYWdlLiIpCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgIyBlbGlmIGNob2ljZSA9PSAiNiI6CiAgICAgICAgIyAgICAgc3VtbW9uX215dGhpY2FsX2NyZWF0dXJlKHdvcmxkLCBwbGF5ZXIsICJkcmFnb24iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJJbnZhbGlkIGNob2ljZS4gUGxlYXNlIHRyeSBhZ2Fpbi4iKQoKZGVmIHZpc2l0X3Nob3Aod29ybGQsIHBsYXllcik6CiAgICBwcmludCgiWW91IGVudGVyIHRoZSB2aWxsYWdlIHNob3AuIFRoZSBzaG9wa2VlcGVyIGdyZWV0cyB5b3Ugd2FybWx5LiIpCiAgICBwcmludCgiQXZhaWxhYmxlIGl0ZW1zOiBicmVhZCAoNSBnb2xkKSwgdG9yY2ggKDEwIGdvbGQpLCByb3BlICgxNSBnb2xkKSwgc3dvcmQgKDUwIGdvbGQpIikKCiAgICB3aGlsZSBUcnVlOgogICAgICAgIGNob2ljZSA9IGlucHV0KCJXaGF0IHdvdWxkIHlvdSBsaWtlIHRvIGJ1eT8gKG9yICdleGl0JyB0byBsZWF2ZSk6ICIpLmxvd2VyKCkKICAgICAgICBpZiBjaG9pY2UgPT0gJ2V4aXQnOgogICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgY2hvaWNlID09ICdicmVhZCcgYW5kIHBsYXllci5nZXQoImdvbGQiLCAwKSA+PSA1OgogICAgICAgICAgICBwbGF5ZXJbImdvbGQiXSAtPSA1CiAgICAgICAgICAgIGFkZF9pdGVtX3RvX2ludmVudG9yeShwbGF5ZXIsICJicmVhZCIpCiAgICAgICAgICAgIHByaW50KCJZb3UgYm91Z2h0IGEgbG9hZiBvZiBicmVhZC4iKQogICAgICAgIGVsaWYgY2hvaWNlID09ICd0b3JjaCcgYW5kIHBsYXllci5nZXQoImdvbGQiLCAwKSA+PSAxMDoKICAgICAgICAgICAgcGxheWVyWyJnb2xkIl0gLT0gMTAKICAgICAgICAgICAgYWRkX2l0ZW1fdG9faW52ZW50b3J5KHBsYXllciwgInRvcmNoIikKICAgICAgICAgICAgcHJpbnQoIllvdSBib3VnaHQgYSB0b3JjaC4iKQogICAgICAgIGVsaWYgY2hvaWNlID09ICdyb3BlJyBhbmQgcGxheWVyLmdldCgiZ29sZCIsIDApID49IDE1OgogICAgICAgICAgICBwbGF5ZXJbImdvbGQiXSAtPSAxNQogICAgICAgICAgICBhZGRfaXRlbV90b19pbnZlbnRvcnkocGxheWVyLCAicm9wZSIpCiAgICAgICAgICAgIHByaW50KCJZb3UgYm91Z2h0IGEgY29pbCBvZiByb3BlLiIpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gJ3N3b3JkJyBhbmQgcGxheWVyLmdldCgiZ29sZCIsIDApID49IDUwOgogICAgICAgICAgICBwbGF5ZXJbImdvbGQiXSAtPSA1MAogICAgICAgICAgICBhZGRfaXRlbV90b19pbnZlbnRvcnkocGxheWVyLCAic3dvcmQiKQogICAgICAgICAgICBwcmludCgiWW91IGJvdWdodCBhIHN0dXJkeSBzd29yZC4iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJJbnZhbGlkIGNob2ljZSBvciBub3QgZW5vdWdoIGdvbGQuIikKCmRlZiB0YWxrX3RvX3ZpbGxhZ2Vycyh3b3JsZCwgcGxheWVyKToKICAgIHByaW50KCJZb3UgYXBwcm9hY2ggYSBncm91cCBvZiB2aWxsYWdlcnMgdG8gY2hhdC4iKQogICAgZXZlbnQgPSBnZW5lcmF0ZV9yYW5kb21fZXZlbnQoZXZlbnRzID0gWygiaGVhcl9ydW1vciIsIDQwKSwgKCJyZWNlaXZlX2FkdmljZSIsIDMwKSwgKE5vbmUsIDMwKV0pCgogICAgaWYgZXZlbnQgPT0gImhlYXJfcnVtb3IiOgogICAgICAgIHByaW50KCJZb3Ugb3ZlcmhlYXIgYW4gaW50ZXJlc3RpbmcgcnVtb3IgYWJvdXQgdHJlYXN1cmUgaGlkZGVuIGluIHRoZSBuZWFyYnkgY2F2ZS4iKQogICAgZWxpZiBldmVudCA9PSAicmVjZWl2ZV9hZHZpY2UiOgogICAgICAgIHByaW50KCJBbiBvbGQgdmlsbGFnZXIgZ2l2ZXMgeW91IGFkdmljZSBhYm91dCBzdXJ2aXZpbmcgaW4gdGhlIGZvcmVzdC4iKQogICAgICAgIGhlYWxfcGxheWVyKHBsYXllciwgMTApCiAgICAgICAgcHJpbnQoIlRoZWlyIHdpc2RvbSBtYWtlcyB5b3UgZmVlbCBtb3JlIHByZXBhcmVkIGZvciB5b3VyIGFkdmVudHVyZXMuIikKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoIllvdSBoYXZlIGEgcGxlYXNhbnQgYnV0IHVuZXZlbnRmdWwgY29udmVyc2F0aW9uIHdpdGggdGhlIHZpbGxhZ2Vycy4iKQoKZGVmIHZpc2l0X2lubih3b3JsZCwgcGxheWVyKToKICAgIHByaW50KCJZb3UgZW50ZXIgdGhlIGNvenkgdmlsbGFnZSBpbm4uIikKICAgIGlmIHBsYXllci5nZXQoImdvbGQiLCAwKSA+PSAxMDoKICAgICAgICBjaG9pY2UgPSBpbnB1dCgiV291bGQgeW91IGxpa2UgdG8gcmVzdCBmb3IgdGhlIG5pZ2h0PyAoMTAgZ29sZCkgW3kvbl06ICIpLmxvd2VyKCkKICAgICAgICBpZiBjaG9pY2UgPT0gJ3knOgogICAgICAgICAgICBwbGF5ZXJbImdvbGQiXSAtPSAxMAogICAgICAgICAgICBoZWFsX3BsYXllcihwbGF5ZXIsIDUwKQogICAgICAgICAgICBwcmludCgiWW91IGhhdmUgYSBnb29kIG5pZ2h0J3MgcmVzdCBhbmQgZmVlbCByZWp1dmVuYXRlZC4iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJZb3UgZGVjaWRlIG5vdCB0byBzdGF5IHRoZSBuaWdodC4iKQogICAgZWxzZToKICAgICAgICBwcmludCgiWW91IGRvbid0IGhhdmUgZW5vdWdoIGdvbGQgdG8gc3RheSB0aGUgbmlnaHQuIikKCmRlZiBwZXJmb3JtX3F1ZXN0KHdvcmxkLCBwbGF5ZXIpOgogICAgcHJpbnQoIllvdSBjaGVjayB0aGUgdmlsbGFnZSBxdWVzdCBib2FyZC4iKQogICAgaWYgZ2VuZXJhdGVfcmFuZG9tX2V2ZW50KGV2ZW50cyA9IFsoInJlY2VpdmVfcXVlc3QiLCAzMCksIChOb25lLCA3MCldKSA9PSAicmVjZWl2ZV9xdWVzdCI6CiAgICAgICAgcHJpbnQoIllvdSBhY2NlcHQgYSBxdWVzdCB0byBkZWxpdmVyIGEgcGFja2FnZSB0byBhIGhlcm1pdCBsaXZpbmcgb24gdGhlIG1vdW50YWluLiIpCiAgICAgICAgYWRkX2l0ZW1fdG9faW52ZW50b3J5KHBsYXllciwgIm15c3RlcmlvdXNfcGFja2FnZSIpCiAgICAgICAgcHJpbnQoIkNvbXBsZXRlIHRoaXMgcXVlc3QgYnkgcmVhY2hpbmcgdGhlIG1vdW50YWluIHBlYWsuIikKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoIlRoZXJlIGFyZSBubyBhdmFpbGFibGUgcXVlc3RzIGF0IHRoZSBtb21lbnQuIikK"